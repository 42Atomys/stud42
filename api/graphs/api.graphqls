####################################
############## ENUMS ###############
####################################

"SecurityPolicy represents the required policy access for the directive @authzByPolicy"
enum SecurityPolicy {
  SERVICE_TOKEN
  NONE
}

"UserPronoun represents the pronoun of an User"
enum UserPronoun {
  PRIVATE
  HE_HIM
  SHE_HER
  THEY_THEM
}

"UserFlag represents the special feature/access for an User (like a role)"
enum UserFlag {
  STAFF
  COLLABORATOR
  CONTRIBUTOR
  SPONSOR
  BETA
  DISCORD
}

"NoticeColor represents the color of a notice"
enum NoticeColor {
  INFO
  SUCCESS
  WARNING
  DANGER
  BLACK
}

"AccountProvider represents the oauth2 provider supported by the app"
enum AccountProvider {
  GITHUB
  DUO
  DISCORD
}

"AccountType represents the tpe of the account. Currently only support Oauth"
enum AccountType {
  OAUTH
}

"Theme represents the supported theme for the app"
enum Theme {
  AUTO
  DARK
  LIGHT
}

enum PresignedUploadURLKind {
  USER_AVATAR
  USER_COVER
}

"""
ClusterMapAvatarSize represents the value accepted for the avatar size on the
cluster map
"""
enum ClusterMapAvatarSize {
  AUTO
  MEDIUM
  LARGE
}

enum FollowsGroupKind {
  MANUAL
  DYNAMIC
}

####################################
############## TYPES ###############
####################################

"""
PageInfo represents the pagination information for a list of objects. It is
used to provide the cursor for the previous and next page.
"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

"""
Notice represents a notice of the app. It is used to represent the Notice through
the header of the app.
"""
type Notice {
  id: UUID!
  slug: String!
  message: String!
  icon: String!
  color: NoticeColor
  isActive: Boolean!
}

"""
Me represents the user currently connected. Is basically an User with more
data and informations relative to himself only
"""
type Me {
  id: UUID!
  email: String!
  duoLogin: String!
  duoID: Int!
  duoAvatarURL: String
  duoAvatarSmallURL: String
  firstName: String!
  usualFirstName: String
  lastName: String!
  phone: String
  pronoun: UserPronoun!
  poolYear: String
  poolMonth: String
  isSwimmer: Boolean!
  nickname: String
  avatarURL: String
  coverURL: String
  accounts: [Account]
  flags: [UserFlag!]!
  currentLocation: Location
  lastLocation: Location
  currentCampus: Campus
  followings: [User]!
  followers: [User]!
  settings: Settings!
  activesNotices: [Notice!]!
}

"""
User represents a user of the app. It is the main entity of the app and is
used to represent the User model.
"""
type User {
  id: UUID!
  duoLogin: String!
  duoID: Int!
  duoAvatarURL: String
  duoAvatarSmallURL: String
  firstName: String!
  usualFirstName: String
  lastName: String!
  pronoun: UserPronoun!
  poolYear: String
  poolMonth: String
  isSwimmer: Boolean!
  nickname: String
  avatarURL: String
  coverURL: String
  accounts: [Account!]!
  flags: [UserFlag!]!
  currentLocation: Location
  lastLocation: Location
  currentCampus: Campus
  intraProxy: IntraUserProxy!
  followersCount: Int!
  followingsCount: Int!
}

"""
IntraUser represents an user on the intra. It is used to represent the User
object returned by the intra API. It is used to provide more informations about
the user based on the intra data cached by the app to increase the performance
and prevent the app to be rate limited by the intra API.
"""
type IntraUserProxy {
  kind: String!
  correctionPoint: Int!
  wallet: Int!
  alumni: Boolean!
  active: Boolean!
  groups: [IntraGroupProxy!]!
  cursusUsers: [IntraCursusUserProxy!]!
  projectsUsers: [IntraProjectsUserProxy!]!
}

type IntraGroupProxy {
  id: Int!
  name: String!
}

type IntraCursusUserProxy {
  grade: String
  level: Float!
  cursus: IntraCursusProxy!
}

type IntraCursusProxy {
  id: Int!
  kind: String!
  name: String!
  slug: String!
}

type IntraProjectsUserProxy {
  id: Int!
  occurrence: Int!
  finalMark: Int
  status: String!
  validated: Boolean!
  project: IntraProjectProxy!
}

type IntraProjectProxy {
  id: Int!
  name: String!
  slug: String!
}

"""
Account represents an account of a user. It is used to represent the Account
model.
"""
type Account {
  id: UUID!
  type: AccountType!
  provider: AccountProvider!
  providerAccountId: String!
  username: String!
  userID: UUID!
  user: User!
}

"""
Campus represents a campus of the app. It is used to represent the Campus model.
"""
type Campus {
  id: UUID!
  name: String!
  active: Boolean!
  timeZone: String!
  languageCode: String!
  country: String
  city: String
}

"""
Location represents a location of the app. It is used to represent the Location
model.
"""
type Location {
  id: UUID!
  duoID: Int!
  userID: UUID!
  campusID: UUID!
  beginAt: Time!
  endAt: Time
  identifier: String!
  userDuoID: Int
  userDuoLogin: String

  user: User!
  campus: Campus!
}

type FollowsGroup {
  id: UUID!
  kind: FollowsGroupKind!
  name: String!
  slug: String!
  color: String
  emoji: String
}

"""
LocationConnection represents a connection of locations, in other words a list
of locations. This will support pagination with cursors. This also provide
the total count of the locations for the request.
"""
type LocationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LocationEdge!]!
}

"""
LocationEdge represents an edge of a location. It is used to provide the cursor
for the previous and next location.
"""
type LocationEdge {
  node: Location
  cursor: Cursor!
}

"""
LocationStats represents the statistics of the locations on a campus. It is used
to know the number of locations currently active on a campus with a given
identifier prefix.
"""
type LocationStats {
  campusID: UUID!
  prefix: String!
  occupiedWorkspace: Int!
}

"""
Settings represents the settings of a user. It is used to represent the Settings
gotype object stored on the User.
"""
type Settings {
  theme: Theme!
  clusterMapAvatarSize: ClusterMapAvatarSize!
}

####################################
########### ROOT TYPES #############
####################################

type Query {
  "me returns the current user"
  me: Me! @authenticated
  "searchUser returns a list of users matching the query"
  searchUser(query: String!, onlyOnline: Boolean = false): [User!]!
    @authenticated
  "campus returns a campus by its ID"
  campus(id: UUID!): Campus @authenticated
  "user returns a user by its ID"
  user(id: UUID!): User @authenticated
  "location returns a location by its ID"
  location(id: UUID!): Location @authenticated
  "locations returns a list of locations for the given campus"
  locations(page: PageInput!, campusID: UUID!): LocationConnection!
    @authenticated
  "locationsByCampusName returns a list of locations for the given campus name"
  locationsByCampusName(
    page: PageInput!
    campusName: String!
  ): LocationConnection! @authenticated
  """
  locationsByCluster returns a list of locations for the given campus name and
  identifier prefix (cluster)
  """
  locationsByCluster(
    page: PageInput!
    campusName: String!
    identifierPrefix: String
  ): LocationConnection! @authenticated
  """
  locationsStatsByPrefixes returns a list of locations stats for the given
  campus name and identifier prefixes (clusters). You can provide a list of
  prefixes to get the stats for each of them.
  """
  locationsStatsByPrefixes(
    campusName: String!
    identifierPrefixes: [String!]
  ): [LocationStats!]! @authenticated

  presignedUploadURL(
    contentType: String!
    contentLength: Int!
    kind: PresignedUploadURLKind!
  ): String! @authenticated

  """
  myFollowings returns a list of users the current user is following in a group
  by its ID or slug.
  """
  myFollowings(followsGroupId: UUID, followsGroupSlug: String): [User!]!
    @authenticated

  "myFollowsGroups retourns a list of follows groups for the current user"
  myFollowsGroups: [FollowsGroup!]! @authenticated

  """
  followsGroupsForUser returns a list of follows groups assigned to a user by
  its ID based on the current logged in user.
  """
  followsGroupsForUser(userID: UUID!): [FollowsGroup!]! @authenticated

  """
  internalGetUserByAccount returns a user by its account. This is used by the
  oauth2 callback to get the user from the account. This is an internal query
  and should not be used by the client.
  """
  internalGetUserByAccount(provider: AccountProvider!, uid: String!): User!
    @authzByPolicy(policy: SERVICE_TOKEN)
  """
  internalGetUserByEmail returns a user by its email. This is used by the
  oauth2 callback to get the user from the email. This is an internal query
  and should not be used by the client.
  """
  internalGetUserByEmail(email: String!): User!
    @authzByPolicy(policy: SERVICE_TOKEN)
  """
  internalGetUser returns a user by its ID. This is used by the oauth2 callback
  to get the user from the ID. This is an internal query and should not be used
  by the client.
  """
  internalGetUser(id: UUID!): User! @authzByPolicy(policy: SERVICE_TOKEN)
}

type Mutation {
  """
  createFriendship creates a friendship between the current user and the given
  user ID.
  """
  createFriendship(userID: UUID!): Boolean! @authenticated
  """
  deleteFriendship deletes a friendship between the current user and the given
  user ID.
  """
  deleteFriendship(userID: UUID!): Boolean! @authenticated
  """
  createOrUpdateFollowsGroup creates a follow groups for the current User or
  update an existing one if an ID is provided in the FollowsGroupInput
  """
  createOrUpdateFollowsGroup(input: FollowsGroupInput!): FollowsGroup!
    @authenticated

  """
  deleteFollowsGroup deletes a follow groups for the current User with the
  given ID
  """
  deleteFollowsGroup(id: UUID!): Boolean! @authenticated

  """
  readNotice marks a notice as read for the current user.
  """
  readNotice(noticeID: UUID!): Boolean! @authenticated
  """
  assignFollowsGroupToUser assigns a follows group to a user. If assign is true,
  the user will be added to the group, otherwise it will be removed.
  """
  assignFollowsGroupToUser(
    userID: UUID!
    followsGroupID: UUID!
    assign: Boolean!
  ): Boolean! @authenticated

  "updateSettings updates the settings of the current user."
  updateSettings(input: SettingsInput!): Settings! @authenticated

  """
  updateMe updates the current user.
  """
  updateMe(input: UpdateMeInput!): Me! @authenticated

  """
  internalCreateUser creates a user. This is used by the oauth2 callback to
  create the user. This is an internal mutation and should not be used by the
  client.
  """
  internalCreateUser(input: CreateUserInput!): UUID!
    @authzByPolicy(policy: SERVICE_TOKEN)
  """
  internalLinkAccount links an account to a user. This is used by the oauth2
  callback to link the account to the user. This is an internal mutation and
  should not be used by the client.
  """
  internalLinkAccount(input: LinkAccountInput!): Account!
    @authzByPolicy(policy: SERVICE_TOKEN)
  """
  inviteOnDiscord invites the current user on Discord to join the S42 Discord
  server with custom invitation link or directly add the user to the server if
  we have the permission to do so.
  """
  inviteOnDiscord: Boolean! @authenticated
}

####################################
############## INPUTS ##############
####################################

"""
PageInput is used to provide pagination information to the queries.
"""
input PageInput {
  after: Cursor
  first: Int! = 100
  before: Cursor
  last: Int
}

"""
CreateUserInput is used to create a user with the internalCreateUser mutation.
"""
input CreateUserInput {
  email: String!
  duoID: Int!
  duoLogin: String!
  firstName: String!
  usualFirstName: String
  lastName: String!
  poolYear: String
  poolMonth: String
  duoAvatarURL: String
  duoAvatarSmallURL: String
  phone: String
  isStaff: Boolean!
  currentDuoCampusID: Int!
}

"""
LinkAccountInput is used to link an account to a user with the
internalLinkAccount mutation.
"""
input LinkAccountInput {
  provider: AccountProvider!
  type: AccountType!
  providerAccountId: String!
  username: String!
  accessToken: String!
  tokenType: String!
  expiresAt: Int
  refreshToken: String
  scope: String!
  userID: String!
}

"""
SettingsInput is used to update the settings of the current user.
"""
input SettingsInput {
  theme: Theme!
  clusterMapAvatarSize: ClusterMapAvatarSize!
}

input UpdateMeInput {
  coverURL: String
  avatarURL: String
  nickname: String
  pronoun: UserPronoun
}

input FollowsGroupInput {
  id: UUID
  name: String!
  color: String
}
