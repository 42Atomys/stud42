scalar UUID

scalar Any

scalar Time

directive @authorizationByPolicy(networkPolicy: NETWORK_POLICY) on FIELD_DEFINITION

directive @authenticated on FIELD_DEFINITION

enum NETWORK_POLICY {
  NONE
  CLUSTER
  LOCAL
}

enum FEATURE {
  DISCORD_ACCESS
  ALPHA_ACCESS
  BETA_ACCESS
}

type User {
  id: UUID!
  email: String!
  duoLogin: String!
  duoID: Int!
  firstName: String!
  usualFirstName: String
  lastName: String!
  Phone: String
  PoolYear: Int
  PoolMonth: Int
  Nickname: String
  AvatarURL: String
  CoverURL: String
  accounts: [Account]
  features: [FEATURE]
}

type Account {
  id: UUID!
  type: String!
  provider: String!
  providerAccountId: String!
  username: String!
  expires_at: Int
  token_type: String
  refresh_token: String @authorizationByPolicy(networkPolicy: CLUSTER)
  access_token: String @authorizationByPolicy(networkPolicy: CLUSTER)
  scope: String
  userID: UUID!
  user: User!
}

type Query {
  me: User! @authenticated
  internalGetUserByAccount(provider: PROVIDER!, uid: String!): User! @authorizationByPolicy(networkPolicy: CLUSTER)
  internalGetUserByEmail(email: String!): User! @authorizationByPolicy(networkPolicy: CLUSTER)
  internalGetUser(id: UUID!): User! @authorizationByPolicy(networkPolicy: CLUSTER)
}

type Mutation {
  internalCreateUser(input: CreateUserInput!): UUID! @authorizationByPolicy(networkPolicy: CLUSTER)
  internalLinkAccount(input: LinkAccountInput!): Account! @authorizationByPolicy(networkPolicy: CLUSTER)
}

input CreateUserInput {
  email: String!
  duoID: Int!
  duoLogin: String!
  firstName: String!
  usualFirstName: String
  lastName: String!
  poolYear: String!
  poolMonth: String!
  phone: String!
}

input LinkAccountInput {
  provider: PROVIDER
  type: ACCOUNT_TYPE
  providerAccountId: String!
  username: String!
  accessToken: String!
  tokenType: String!
  expiresAt: Int
  refreshToken: String
  scope: String!
  userID: String!
}

enum PROVIDER {
  GITHUB
  DUO
  DISCORD
}

enum ACCOUNT_TYPE {
  OAUTH
}