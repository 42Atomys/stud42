scalar UUID

scalar Any

scalar Time

directive @authorizationByPolicy(networkPolicy: NETWORK_POLICY) on FIELD_DEFINITION

enum NETWORK_POLICY {
  NONE
  CLUSTER
  LOCAL
}

type User {
  id: UUID!
  email: String!
  duoLogin: String!
  duoID: Int!
  firstName: String!
  usualFirstName: String
  lastName: String!
  Phone: String
  PoolYear: Int
  PoolMonth: Int
  Nickname: String
  AvatarURL: String
  CoverURL: String
  accounts: [Account]
}

type Account {
  id: UUID!
  type: String!
  provider: String!
  providerAccountId: String!
  expires_at: Int
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  userID: UUID!
  user: User!
}

type Query {
  me: User!
  internalGetUserByAccount(provider: PROVIDER!, uid: String!): User! @authorizationByPolicy(networkPolicy: CLUSTER)
  internalGetUserByEmail(email: String!): User! @authorizationByPolicy(networkPolicy: CLUSTER)
  internalGetUser(id: UUID!): User! @authorizationByPolicy(networkPolicy: CLUSTER)
}

type Mutation {
  internalCreateUser(input: CreateUserInput!): UUID! @authorizationByPolicy(networkPolicy: CLUSTER)
  internalLinkAccount(input: LinkAccountInput!): Account! @authorizationByPolicy(networkPolicy: CLUSTER)
}

input CreateUserInput {
  email: String!
  duoID: Int!
  duoLogin: String!
  firstName: String!
  usualFirstName: String
  lastName: String!
  poolYear: String!
  poolMonth: String!
  phone: String!
}

input LinkAccountInput {
  provider: PROVIDER
  type: ACCOUNT_TYPE
  providerAccountId: String!
  accessToken: String!
  tokenType: String!
  expiresAt: Int
  refreshToken: String
  scope: String!
  userID: String!
}

enum PROVIDER {
  GITHUB
  DUO
}

enum ACCOUNT_TYPE {
  OAUTH
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  
  """duo_login field predicates"""
  duoLogin: String
  duoLoginNEQ: String
  duoLoginIn: [String!]
  duoLoginNotIn: [String!]
  duoLoginGT: String
  duoLoginGTE: String
  duoLoginLT: String
  duoLoginLTE: String
  duoLoginContains: String
  duoLoginHasPrefix: String
  duoLoginHasSuffix: String
  duoLoginEqualFold: String
  duoLoginContainsFold: String
  
  """duo_id field predicates"""
  duoID: Int
  duoIDNEQ: Int
  duoIDIn: [Int!]
  duoIDNotIn: [Int!]
  duoIDGT: Int
  duoIDGTE: Int
  duoIDLT: Int
  duoIDLTE: Int
  
  """first_name field predicates"""
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  
  """usual_first_name field predicates"""
  usualFirstName: String
  usualFirstNameNEQ: String
  usualFirstNameIn: [String!]
  usualFirstNameNotIn: [String!]
  usualFirstNameGT: String
  usualFirstNameGTE: String
  usualFirstNameLT: String
  usualFirstNameLTE: String
  usualFirstNameContains: String
  usualFirstNameHasPrefix: String
  usualFirstNameHasSuffix: String
  usualFirstNameIsNil: Boolean
  usualFirstNameNotNil: Boolean
  usualFirstNameEqualFold: String
  usualFirstNameContainsFold: String
  
  """last_name field predicates"""
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  
  """pool_year field predicates"""
  poolYear: String
  poolYearNEQ: String
  poolYearIn: [String!]
  poolYearNotIn: [String!]
  poolYearGT: String
  poolYearGTE: String
  poolYearLT: String
  poolYearLTE: String
  poolYearContains: String
  poolYearHasPrefix: String
  poolYearHasSuffix: String
  poolYearEqualFold: String
  poolYearContainsFold: String
  
  """pool_month field predicates"""
  poolMonth: String
  poolMonthNEQ: String
  poolMonthIn: [String!]
  poolMonthNotIn: [String!]
  poolMonthGT: String
  poolMonthGTE: String
  poolMonthLT: String
  poolMonthLTE: String
  poolMonthContains: String
  poolMonthHasPrefix: String
  poolMonthHasSuffix: String
  poolMonthEqualFold: String
  poolMonthContainsFold: String
  
  """nickname field predicates"""
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameIsNil: Boolean
  nicknameNotNil: Boolean
  nicknameEqualFold: String
  nicknameContainsFold: String
  
  """avatar_url field predicates"""
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLIsNil: Boolean
  avatarURLNotNil: Boolean
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  
  """cover_url field predicates"""
  coverURL: String
  coverURLNEQ: String
  coverURLIn: [String!]
  coverURLNotIn: [String!]
  coverURLGT: String
  coverURLGTE: String
  coverURLLT: String
  coverURLLTE: String
  coverURLContains: String
  coverURLHasPrefix: String
  coverURLHasSuffix: String
  coverURLIsNil: Boolean
  coverURLNotNil: Boolean
  coverURLEqualFold: String
  coverURLContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """accounts edge predicates"""
  hasAccounts: Boolean
  hasAccountsWith: [AccountWhereInput!]
}

"""
AccountWhereInput is used for filtering Account objects.
Input was generated by ent.
"""
input AccountWhereInput {
  not: AccountWhereInput
  and: [AccountWhereInput!]
  or: [AccountWhereInput!]
  
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  
  """provider field predicates"""
  provider: String
  providerNEQ: String
  providerIn: [String!]
  providerNotIn: [String!]
  providerGT: String
  providerGTE: String
  providerLT: String
  providerLTE: String
  providerContains: String
  providerHasPrefix: String
  providerHasSuffix: String
  providerEqualFold: String
  providerContainsFold: String
  
  """provider_account_id field predicates"""
  providerAccountID: String
  providerAccountIDNEQ: String
  providerAccountIDIn: [String!]
  providerAccountIDNotIn: [String!]
  providerAccountIDGT: String
  providerAccountIDGTE: String
  providerAccountIDLT: String
  providerAccountIDLTE: String
  providerAccountIDContains: String
  providerAccountIDHasPrefix: String
  providerAccountIDHasSuffix: String
  providerAccountIDEqualFold: String
  providerAccountIDContainsFold: String
  
  """expires_at field predicates"""
  expiresAt: Int
  expiresAtNEQ: Int
  expiresAtIn: [Int!]
  expiresAtNotIn: [Int!]
  expiresAtGT: Int
  expiresAtGTE: Int
  expiresAtLT: Int
  expiresAtLTE: Int
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  
  """token_type field predicates"""
  tokenType: String
  tokenTypeNEQ: String
  tokenTypeIn: [String!]
  tokenTypeNotIn: [String!]
  tokenTypeGT: String
  tokenTypeGTE: String
  tokenTypeLT: String
  tokenTypeLTE: String
  tokenTypeContains: String
  tokenTypeHasPrefix: String
  tokenTypeHasSuffix: String
  tokenTypeEqualFold: String
  tokenTypeContainsFold: String
  
  """refresh_token field predicates"""
  refreshToken: String
  refreshTokenNEQ: String
  refreshTokenIn: [String!]
  refreshTokenNotIn: [String!]
  refreshTokenGT: String
  refreshTokenGTE: String
  refreshTokenLT: String
  refreshTokenLTE: String
  refreshTokenContains: String
  refreshTokenHasPrefix: String
  refreshTokenHasSuffix: String
  refreshTokenIsNil: Boolean
  refreshTokenNotNil: Boolean
  refreshTokenEqualFold: String
  refreshTokenContainsFold: String
  
  """access_token field predicates"""
  accessToken: String
  accessTokenNEQ: String
  accessTokenIn: [String!]
  accessTokenNotIn: [String!]
  accessTokenGT: String
  accessTokenGTE: String
  accessTokenLT: String
  accessTokenLTE: String
  accessTokenContains: String
  accessTokenHasPrefix: String
  accessTokenHasSuffix: String
  accessTokenEqualFold: String
  accessTokenContainsFold: String
  
  """scope field predicates"""
  scope: String
  scopeNEQ: String
  scopeIn: [String!]
  scopeNotIn: [String!]
  scopeGT: String
  scopeGTE: String
  scopeLT: String
  scopeLTE: String
  scopeContains: String
  scopeHasPrefix: String
  scopeHasSuffix: String
  scopeEqualFold: String
  scopeContainsFold: String
  
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}

"""
SessionWhereInput is used for filtering Session objects.
Input was generated by ent.
"""
input SessionWhereInput {
  not: SessionWhereInput
  and: [SessionWhereInput!]
  or: [SessionWhereInput!]
  
  """expires field predicates"""
  expires: Time
  expiresNEQ: Time
  expiresIn: [Time!]
  expiresNotIn: [Time!]
  expiresGT: Time
  expiresGTE: Time
  expiresLT: Time
  expiresLTE: Time
  expiresIsNil: Boolean
  expiresNotNil: Boolean
  
  """session_token field predicates"""
  sessionToken: String
  sessionTokenNEQ: String
  sessionTokenIn: [String!]
  sessionTokenNotIn: [String!]
  sessionTokenGT: String
  sessionTokenGTE: String
  sessionTokenLT: String
  sessionTokenLTE: String
  sessionTokenContains: String
  sessionTokenHasPrefix: String
  sessionTokenHasSuffix: String
  sessionTokenEqualFold: String
  sessionTokenContainsFold: String
  
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
