name: "Deployement"
on:
  workflow_call:
    inputs:
      environmentName:
        required: true
        type: string
      stacks:
        required: true
        type: string
        description: "The name of stacks to deploy, in json array format"
      image:
        required: true
        description: "The docker image SHA to deploy"
        type: string
    secrets:
      TF_WORKSPACE:
        required: true
        description: "Terraform workspace"
      TERRAFORM_AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key id"
      TERRAFORM_AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"

permissions:
  contents: read

jobs:
  terraform:
    name: "${{ matrix.stack }} on ${{ inputs.environmentName }}"
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environmentName }}
      url: ${{ steps.envurl.outputs.url }}
    strategy:
      matrix:
        stack: ${{ fromJson(inputs.stacks) }}
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
      KUBE_CONFIG_PATH: ~/.kube/config
    # Use the Bash shell regardless whether the GitHub Actions runner is
    # ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: "deploy/stacks/${{ matrix.stack }}"

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      - env:
          KUBECONFIG_ADMIN: ${{ secrets.KUBECONFIG_ADMIN }}
        run: mkdir -p ~/.kube && echo "$KUBECONFIG_ADMIN" >> ~/.kube/config
      - name: Generate url of the environment
        id: envurl
        uses: actions/github-script@v6
        with:
          script: |
            const eventName = context.eventName;
            const event = context.payload;

            if (eventName == 'pull_request') {
              const url = `https://pr-${context.payload.pull_request.number}.review-apps.s42.dev`;
              core.setOutput('url', url);
            } else if (eventName == 'release' && context.payload.action == 'prereleased') {
              const url = 'https://next.s42.app';
              core.setOutput('url', url);
            } else {
              core.setOutput('url', 'https://s42.app');
            }

      # Install the latest version of Terraform CLI and configure the
      # Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating
      # initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init

        # On push to main, build or change infrastructure according
        # to Terraform configuration files
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
