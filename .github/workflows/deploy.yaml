name: "Deployement"
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image:
        required: true
        description: "The docker image SHA to deploy"
        type: string
    secrets:
      TF_WORKSPACE:
        required: true
        description: "Terraform workspace"
      TERRAFORM_AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key id"
      TERRAFORM_AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
permissions:
  contents: read

run-name: "Deploy ${{ inputs.image }} to ${{ inputs.environment }}"

jobs:
  terraform:
    name: "${{ inputs.environment }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is
    # ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the
      # Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating
      # initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform -chdir=deploy init

        # On push to main, build or change infrastructure according
        # to Terraform configuration files
      - name: Terraform Apply
        id: apply
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.ref_name == 'refactor/infrastructure-as-code'
        run: terraform -chdir=deploy apply -auto-approve -input=false
