name: "Deployement"
on:
  workflow_call:
    inputs:
      environmentName:
        required: true
        type: string
      image:
        required: true
        description: "The docker image SHA to deploy"
        type: string
    secrets:
      TF_WORKSPACE:
        required: true
        description: "Terraform workspace"
      TERRAFORM_AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key id"
      TERRAFORM_AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
permissions:
  contents: read

run-name: "Deploy ${{ inputs.image }} to ${{ inputs.environmentName }}"

jobs:
  terraform:
    name: "${{ inputs.environmentName }}"
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environmentName }}
      url: ${{ steps.envurl.outputs.url }}
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is
    # ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deploy

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate url of the environment
        id: envurl
        uses: actions/github-script@v6
        with:
          script: |
            const eventName = context.eventName;
            const event = context.payload;
            const refName = context.ref.split('refs/heads/').pop().replaceAll("/", "-");

            if (eventName == 'pull_request') {
              const url = `https://${refName}.review-apps.s42.dev`;
              core.setOutput('url', url);
            } else if (eventName == 'release' && context.payload.action == 'prereleased') {
              const url = 'https://next.s42.app';
              core.setOutput('url', url);
            } else {
              core.setOutput('url', 'https://s42.app');
            }
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.envurl.outputs.url }}
          environment: ${{ inputs.environmentName }}
          state: in_progress

      # Install the latest version of Terraform CLI and configure the
      # Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating
      # initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init

        # On push to main, build or change infrastructure according
        # to Terraform configuration files
      - name: Terraform Apply
        id: apply
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.ref_name == 'refactor/infrastructure-as-code'
        run: terraform apply -auto-approve -input=false

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.envurl.outputs.url }}
          state: "success"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.envurl.outputs.url }}
          state: "failure"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
