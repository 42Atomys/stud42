name: "Deployement"
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      TF_WORKSPACE:
        required: true
        description: "Terraform workspace"
      TERRAFORM_AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key id"
      TERRAFORM_AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
permissions:
  contents: read

jobs:
  terraform:
    name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is
    # ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the
      # Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating
      # initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform -chdir=deploy init

      # Checks that all Terraform configuration files adhere to a canonical
      # format
      - name: Terraform Format
        id: fmt
        run: terraform -chdir=deploy fmt -no-color -check

      # Checks that all Terraform configuration files are valid
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=deploy validate -no-color -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform -chdir=deploy plan -no-color -input=false

        # On push to main, build or change infrastructure according
        # to Terraform configuration files
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=deploy apply -auto-approve -input=false

      # On pull request, build or change infrastructure according
      # to Terraform configuration files
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
