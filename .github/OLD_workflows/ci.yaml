name: CI/CD ðŸš€
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ###############################
  ########### LINTERS ###########
  ###############################
  backend-linters:
    name: Backend Linters ðŸ’»
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"
          check-latest: true
      - name: Generate code
        run: make -f build/Makefile deps generate
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.2.0
        with:
          version: latest
  frontend-linters:
    name: Frontend Linters ðŸ•¹
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Install protoc
        run: |
          wget -O /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protoc-3.20.0-linux-x86_64.zip
          unzip -ud /tmp/protoc /tmp/protoc.zip
          mv /tmp/protoc/bin/protoc /usr/local/bin/protoc
      - name: Generate code
        run: yarn generate

      - name: ESLint
        run: yarn style:lint

      - name: Prettier
        run: yarn style:prettier

      - name: TypeScript
        run: yarn style:ts
  ###############################
  ############ TESTS ############
  ###############################
  backend-tests:
    name: Backend Tests ðŸ’»
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"
          check-latest: true
      - name: Generate code
        run: make -f build/Makefile deps generate
      - name: Run Unit tests
        run: |
          go test ./... -coverprofile coverage.out -covermode count
          go tool cover -func coverage.out
      - name: Quality Gate - Test coverage shall be above threshold
        # continue-on-error to allow job to pass without tests.
        # @see issue #57 on Github
        continue-on-error: true
        env:
          TESTCOVERAGE_THRESHOLD: 80
        run: |
          echo "Quality Gate: checking test coverage is above threshold ..."
          echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
          totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Current test coverage : $totalCoverage %"
          if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 > $2)}') )); then
              echo "OK"
          else
              echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
              echo "Failed"
              exit 1
          fi
      - name: Run Go Build
        run: |
          go build -o /tmp/applications-test-units

  frontend-tests:
    name: Frontend Tests ðŸ•¹
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Jest
        run: yarn test:ci

      - name: Quality Gate - Test coverage shall be above threshold
        env:
          TESTCOVERAGE_THRESHOLD: 80
        run: |
          echo "Quality Gate: checking test coverage is above threshold ..."
          echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
          totalCoverage=`cat coverage/coverage-summary.json | jq '.total.statements.pct'`
          echo "Current test coverage : $totalCoverage %"
          if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 > $2)}') )); then
              echo "OK"
          else
              echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
              echo "Failed"
              exit 1
          fi
  ###############################
  ############ BUILD ############
  ###############################
  build_and_push:
    name: "Build & push to ghcr.io ðŸ”§"
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          github-token: ${{ github.token }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: build/Dockerfile
          build-args: |
            APP_VERSION=${{ steps.meta.outputs.version }}

  ###############################
  ########### DEPLOY ############
  ###############################
  deploy:
    name: "Deploy to Kubernetes ðŸš€"
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - run: echo "Deploying to Kubernetes"
