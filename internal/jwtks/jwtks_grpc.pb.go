// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: jwtks.proto

package jwtks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JWTKSServiceClient is the client API for JWTKSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWTKSServiceClient interface {
	GenerateToken(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*Reply, error)
	ValidateToken(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*Reply, error)
}

type jWTKSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJWTKSServiceClient(cc grpc.ClientConnInterface) JWTKSServiceClient {
	return &jWTKSServiceClient{cc}
}

func (c *jWTKSServiceClient) GenerateToken(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/jwtks.JWTKSService/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTKSServiceClient) ValidateToken(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/jwtks.JWTKSService/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTKSServiceServer is the server API for JWTKSService service.
// All implementations must embed UnimplementedJWTKSServiceServer
// for forward compatibility
type JWTKSServiceServer interface {
	GenerateToken(context.Context, *GenerateRequest) (*Reply, error)
	ValidateToken(context.Context, *ValidateRequest) (*Reply, error)
	mustEmbedUnimplementedJWTKSServiceServer()
}

// UnimplementedJWTKSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJWTKSServiceServer struct {
}

func (UnimplementedJWTKSServiceServer) GenerateToken(context.Context, *GenerateRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedJWTKSServiceServer) ValidateToken(context.Context, *ValidateRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedJWTKSServiceServer) mustEmbedUnimplementedJWTKSServiceServer() {}

// UnsafeJWTKSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWTKSServiceServer will
// result in compilation errors.
type UnsafeJWTKSServiceServer interface {
	mustEmbedUnimplementedJWTKSServiceServer()
}

func RegisterJWTKSServiceServer(s grpc.ServiceRegistrar, srv JWTKSServiceServer) {
	s.RegisterService(&JWTKSService_ServiceDesc, srv)
}

func _JWTKSService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTKSServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtks.JWTKSService/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTKSServiceServer).GenerateToken(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTKSService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTKSServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtks.JWTKSService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTKSServiceServer).ValidateToken(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JWTKSService_ServiceDesc is the grpc.ServiceDesc for JWTKSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWTKSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jwtks.JWTKSService",
	HandlerType: (*JWTKSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _JWTKSService_GenerateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _JWTKSService_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jwtks.proto",
}
