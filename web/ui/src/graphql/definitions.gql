#
# !!!! WARNING: NEVER IMPORT THIS MODULE DIRECTLY !!!!
#
# This file is used to define the documents (queries and mutations) that are
# available in the GraphQL interface.
# To use this module, you must generate the schema using the `generate` script
# by running `yarn run generate`.
# To import this module, you must use the `import {} from '@graphql.d'` syntax.
# All generated types will be available in the `generated.ts` siblings file.
#
# The name of query or mutation must do not contain prefix or suffix like `Query`
# or `Mutation`. This is added automatically.
#
# EX: add a mutation called `mutation addFriend(){ addFriend(id: UUID!): bool }`
# to this schema, you must use the following syntax to use it:
#
# To retrieve the generated gql document, you must use the following syntax:
#
# ```
# import { addFriendMutationDocument } from '@graphql.d';
# ```
#
# NOTE: We use GraphQL Code Generator to hard type the generated schema.
# @see https://graphql-code-generator.com/

mutation internalCreateUser(
  $duoID: Int!
  $duoLogin: String!
  $email: String!
  $firstName: String!
  $usualFirstName: String
  $lastName: String!
  $poolYear: String
  $poolMonth: String
  $duoAvatarURL: String
  $duoAvatarSmallURL: String
  $phone: String
  $isStaff: Boolean!
  $currentDuoCampusID: Int!
) {
  internalCreateUser(
    input: {
      duoLogin: $duoLogin
      email: $email
      duoID: $duoID
      firstName: $firstName
      usualFirstName: $usualFirstName
      lastName: $lastName
      poolYear: $poolYear
      poolMonth: $poolMonth
      duoAvatarURL: $duoAvatarURL
      duoAvatarSmallURL: $duoAvatarSmallURL
      phone: $phone
      isStaff: $isStaff
      currentDuoCampusID: $currentDuoCampusID
    }
  )
}

mutation internalLinkAccount(
  $provider: AccountProvider!
  $providerAccountId: String!
  $username: String!
  $token_type: String!
  $access_token: String!
  $refresh_token: String
  $scope: String!
  $expire_at: Int
  $userId: String!
) {
  internalLinkAccount(
    input: {
      provider: $provider
      type: OAUTH
      providerAccountId: $providerAccountId
      username: $username
      tokenType: $token_type
      accessToken: $access_token
      refreshToken: $refresh_token
      scope: $scope
      expiresAt: $expire_at
      userID: $userId
    }
  ) {
    id
    type
    provider
    providerAccountId
    username
    user {
      id
    }
  }
}

mutation inviteOnDiscord {
  inviteOnDiscord
}

query searchUser($query: String!, $onlyOnline: Boolean) {
  searchUser(query: $query, onlyOnline: $onlyOnline) {
    id
    duoLogin
    firstName
    usualFirstName
    lastName
    currentLocation {
      ...PreciseLocationData
    }
  }
}

mutation createFriendship($userID: UUID!) {
  createFriendship(userID: $userID)
}

mutation deleteFriendship($userID: UUID!) {
  deleteFriendship(userID: $userID)
}

mutation createOrUpdateFollowsGroup($input: FollowsGroupInput!) {
  createOrUpdateFollowsGroup(input: $input) {
    ...FollowsGroup
  }
}

mutation assignFollowsGroupToUser(
  $userID: UUID!
  $followsGroupID: UUID!
  $assign: Boolean!
) {
  assignFollowsGroupToUser(
    userID: $userID
    followsGroupID: $followsGroupID
    assign: $assign
  )
}

query followsGroupsForUser($userID: UUID!) {
  followsGroupsForUser(userID: $userID) {
    ...FollowsGroup
  }
}

mutation deleteFollowsGroup($id: UUID!) {
  deleteFollowsGroup(id: $id)
}

mutation updateSettings($input: SettingsInput!) {
  updateSettings(input: $input) {
    ...ApparenceSettings
  }
}

mutation updateMe($input: UpdateMeInput!) {
  updateMe(input: $input) {
    nickname
    coverURL
    avatarURL
    pronoun
  }
}

query presignedUploadURL(
  $kind: PresignedUploadURLKind!
  $contentType: String!
  $contentLength: Int!
) {
  presignedUploadURL(
    kind: $kind
    contentType: $contentType
    contentLength: $contentLength
  )
}

query myApparenceSettings {
  me {
    id
    settings {
      ...ApparenceSettings
    }
  }
}

query me {
  me {
    id
    duoLogin
    firstName
    usualFirstName
    lastName
    flags
    duoAvatarSmallURL
    pronoun
    nickname
    avatarURL
    coverURL
    accounts {
      provider
      providerAccountId
      username
    }
    currentCampus {
      ...CampusBasicData
    }

    currentLocation {
      ...LocationBasicData
    }
  }

  myFollowings {
    id
    ...UserIdentyData
  }
}

query userProfile($userID: UUID!) {
  user(id: $userID) {
    id
    duoLogin
    firstName
    usualFirstName
    lastName
    duoAvatarSmallURL
    pronoun
    poolMonth
    poolYear
    isSwimmer
    nickname
    avatarURL
    coverURL
    flags
    followersCount
    followingsCount
    lastLocation {
      ...LocationBasicData
    }
    currentCampus {
      ...CampusBasicData
    }
    accounts {
      provider
      providerAccountId
      username
    }

    intraProxy {
      correctionPoint
      wallet
      alumni
      active
      cursusUsers {
        grade
        level
        cursus {
          kind
          name
        }
      }
    }
  }
}

# @deprecated
query meWithFlags {
  me {
    id
    accounts {
      provider
      providerAccountId
      username
    }
    flags
    currentCampus {
      ...CampusBasicData
    }
  }
}

# @deprecated
query myFollowings($followsGroupSlug: String) {
  myFollowings(followsGroupSlug: $followsGroupSlug) {
    id
    lastLocation {
      ...LocationBasicData
      campus {
        ...CampusBasicData
      }
    }
    ...UserIdentyData
  }
}

query friendsPage($followsGroupSlug: String) {
  myFollowings(followsGroupSlug: $followsGroupSlug) {
    id
    lastLocation {
      ...LocationBasicData
      campus {
        ...CampusBasicData
      }
    }
    ...UserIdentyData
  }

  myFollowsGroups {
    ...FollowsGroup
  }
}

query followsGroupManageModal($userID: UUID!) {
  followsGroupsForUser(userID: $userID) {
    ...FollowsGroup
  }

  myFollowsGroups {
    ...FollowsGroup
  }
}

query clusterSidebarData($campusName: String!, $clusterPrefixes: [String!]!) {
  me {
    currentCampus {
      ...CampusBasicData
    }
  }

  locationsStatsByPrefixes(
    campusName: $campusName
    identifierPrefixes: $clusterPrefixes
  ) {
    prefix
    occupiedWorkspace
  }
}

query clusterView($campusName: String!, $identifierPrefix: String!) {
  locationsByCluster(
    campusName: $campusName
    identifierPrefix: $identifierPrefix
    page: { first: 1000 }
  ) {
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        identifier
        endAt
        user {
          id
          ...UserIdentyData
          isSwimmer
        }
      }
    }
  }
}

query internalGetUser($id: UUID!) {
  user: internalGetUser(id: $id) {
    ...UserAccountsData
  }
}

query internalGetUserByEmail($email: String!) {
  user: internalGetUserByEmail(email: $email) {
    ...UserAccountsData
  }
}

query internalGetUserByAccount(
  $provider: AccountProvider!
  $providerAccountId: String!
) {
  user: internalGetUserByAccount(provider: $provider, uid: $providerAccountId) {
    ...UserAccountsData
  }
}

fragment UserAccountsData on User {
  id
  accounts {
    provider
    providerAccountId
    username
  }
}

fragment UserIdentyData on User {
  id
  duoLogin
  firstName
  usualFirstName
  lastName
  flags
  duoAvatarSmallURL
}

fragment LocationBasicData on Location {
  id
  identifier
  beginAt
  endAt
}

fragment PreciseLocationData on Location {
  id
  identifier
  campus {
    name
  }
}

fragment CampusBasicData on Campus {
  id
  name
  city
  country
}

fragment ApparenceSettings on Settings {
  theme
  clusterMapAvatarSize
}

fragment FollowsGroup on FollowsGroup {
  id
  kind
  name
  slug
  color
  emoji
}
