/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: jwtks.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace jwtks {
  export class SignPayloadRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            payload?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('payload' in data && data.payload != undefined) {
          this.payload = data.payload;
        }
      }
    }
    get payload() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set payload(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { payload?: string }): SignPayloadRequest {
      const message = new SignPayloadRequest({});
      if (data.payload != null) {
        message.payload = data.payload;
      }
      return message;
    }
    toObject() {
      const data: {
        payload?: string;
      } = {};
      if (this.payload != null) {
        data.payload = this.payload;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.payload.length) writer.writeString(1, this.payload);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): SignPayloadRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SignPayloadRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.payload = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignPayloadRequest {
      return SignPayloadRequest.deserialize(bytes);
    }
  }
  export class ValidateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            token?: string;
            regenerate?: boolean;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('token' in data && data.token != undefined) {
          this.token = data.token;
        }
        if ('regenerate' in data && data.regenerate != undefined) {
          this.regenerate = data.regenerate;
        }
      }
    }
    get token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get regenerate() {
      return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set regenerate(value: boolean) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      token?: string;
      regenerate?: boolean;
    }): ValidateRequest {
      const message = new ValidateRequest({});
      if (data.token != null) {
        message.token = data.token;
      }
      if (data.regenerate != null) {
        message.regenerate = data.regenerate;
      }
      return message;
    }
    toObject() {
      const data: {
        token?: string;
        regenerate?: boolean;
      } = {};
      if (this.token != null) {
        data.token = this.token;
      }
      if (this.regenerate != null) {
        data.regenerate = this.regenerate;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.token.length) writer.writeString(1, this.token);
      if (this.regenerate != false) writer.writeBool(2, this.regenerate);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ValidateRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.token = reader.readString();
            break;
          case 2:
            message.regenerate = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ValidateRequest {
      return ValidateRequest.deserialize(bytes);
    }
  }
  export class Reply extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            token?: string;
            valid?: boolean;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('token' in data && data.token != undefined) {
          this.token = data.token;
        }
        if ('valid' in data && data.valid != undefined) {
          this.valid = data.valid;
        }
      }
    }
    get token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get valid() {
      return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set valid(value: boolean) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { token?: string; valid?: boolean }): Reply {
      const message = new Reply({});
      if (data.token != null) {
        message.token = data.token;
      }
      if (data.valid != null) {
        message.valid = data.valid;
      }
      return message;
    }
    toObject() {
      const data: {
        token?: string;
        valid?: boolean;
      } = {};
      if (this.token != null) {
        data.token = this.token;
      }
      if (this.valid != null) {
        data.valid = this.valid;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.token.length) writer.writeString(1, this.token);
      if (this.valid != false) writer.writeBool(2, this.valid);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reply {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Reply();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.token = reader.readString();
            break;
          case 2:
            message.valid = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Reply {
      return Reply.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedJWTKSServiceService {
    static definition = {
      SignPayload: {
        path: '/jwtks.JWTKSService/SignPayload',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SignPayloadRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SignPayloadRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: Reply) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          Reply.deserialize(new Uint8Array(bytes)),
      },
      ValidateToken: {
        path: '/jwtks.JWTKSService/ValidateToken',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: ValidateRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          ValidateRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: Reply) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          Reply.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SignPayload(
      call: grpc_1.ServerUnaryCall<SignPayloadRequest, Reply>,
      callback: grpc_1.sendUnaryData<Reply>
    ): void;
    abstract ValidateToken(
      call: grpc_1.ServerUnaryCall<ValidateRequest, Reply>,
      callback: grpc_1.sendUnaryData<Reply>
    ): void;
  }
  export class JWTKSServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedJWTKSServiceService.definition,
    'JWTKSService',
    {}
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>
    ) {
      super(address, credentials, options);
    }
    SignPayload: GrpcUnaryServiceInterface<SignPayloadRequest, Reply> = (
      message: SignPayloadRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<Reply>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<Reply>,
      callback?: grpc_1.requestCallback<Reply>
    ): grpc_1.ClientUnaryCall => {
      return super.SignPayload(message, metadata, options, callback);
    };
    ValidateToken: GrpcUnaryServiceInterface<ValidateRequest, Reply> = (
      message: ValidateRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<Reply>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<Reply>,
      callback?: grpc_1.requestCallback<Reply>
    ): grpc_1.ClientUnaryCall => {
      return super.ValidateToken(message, metadata, options, callback);
    };
  }
}
