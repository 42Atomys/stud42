# API relatives configurations
api:
  # s3 configurations for the API to store files
  s3:
    # The bucket configuration to store the files of the API for the Users
    # This bucket is used to store the profile pictures of the users
    # and the files uploaded by the users in the API (soon)
    users:
      bucket: s42-users
      region: europe-west1
      endpoint: http://localhost:9000
      # forcePathStyle is used to force the usage of the path style
      # in the endpoint. This is used to use minio as a S3 compatible
      # storage in local development, or in production with a provider
      # that does not support the virtual host style.
      forcePathStyle: true
    # The bucket configuration to store the files of the API for the User Exports
    # This bucket is used to store the files exported by the users in the
    # API. This bucket will keep the files for a limited time (24 hours).
    exports:
      bucket: s42-exports
      region: europe-west1
      endpoint: http://minio:9000
      forcePathStyle: true

# Interface relatives configurations
interface: {}

# auth service relatives configurations
auth:
  # Endpoint of the public JWKSet can be used to validate
  # a JWT Token
  endpoints:
    # The endpoint used to retrieve the public key for the JWT token.
    # This endpoint is a HTTP(S) endpoint. If you have access to the
    # DEVENV, you can use the public dev endpoint. Else, use the
    # `auth-service` configured locally.
    #
    # In production, the auth endpoint is a HTTPS endpoint. Accessible
    # to the public.
    sets: http://localhost:5000/.well-known/jwks
    # The endpoint used to generate a JWT token from a user.
    # In order to use this endpoint, the `auth-service` must be running.
    # If you have access to the DEVENV you can use the public dev endpoint.
    #
    # In production, the endpoint should be `secure`.
    # The communication with the authorization server is cluster
    # specific and cannot be called from outside the cluster without the
    # proper credentials.
    sign: http://localhost:5000/token
  # Configuration about the JWT
  # Also called : The JWK
  jwk:
    # The issuer of the JWT token (the auth service) should be
    # the same as the one configured in the auth service. This
    # is used to validate the JWT token.
    issuer: "s42-local-provider"
    # The audience of the JWT token (the app) should be the same
    # as the one configured in the auth service. This is used to
    # validate the JWT token too.
    audience: "app:s42:system"
    # Certificates used to sign and validate the JWT token.
    certPrivateKeyFile: /workspace/certs/private.key
    certPublicKeyFile: /workspace/certs/public.pem

discord:
  guildID: "248936708379246593"
